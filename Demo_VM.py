#!/usr/bin/env python
# coding: utf-8

# In[2]:


import operator
import numpy as np
import random
import itertools
import pandas as pd
import seaborn as sns
get_ipython().run_line_magic('matplotlib', 'inline')
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import datasets
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.metrics import accuracy_score
from sklearn.preprocessing import PolynomialFeatures
from sklearn import preprocessing
from sklearn.linear_model import LinearRegression,Ridge,Lasso
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import GridSearchCV
from numpy import linspace, meshgrid
import gmplot
import folium
from folium import plugins
from folium.plugins import HeatMap
from folium.plugins import MarkerCluster
from sklearn.preprocessing import MinMaxScaler
from sklearn import neighbors 
import math
import json
import re
import shapefile
import shapely
from shapely.geometry import Point 
from shapely.geometry import shape 
import fiona
import statistics
from statistics import mode
import collections
from collections import Counter
import heapq
import geopandas
import time


# In[3]:


di={
       'MOTOR VEHICLE ACCIDENTS NON-FATAL':1,
       'CrPC':5,'POCSO':8,'IMPERSONATION ':2,'PUBLIC JUSTICE':2,'Human Trafficking':7,
       'SEDITION':5,'ASSAULT OR USE OF CRIMINAL FORCE TO DISROBE WOMAN':6,
       'MOTOR VEHICLE ACCIDENTS FATAL':7,
       'CULPABLE HOMICIDE NOT AMOUNTING TO MURDER':5, 'NEGLIGENT ACT':1,
       'PUBLIC SAFETY':5, 'BURGLARY - NIGHT':2, 'THEFT':3,
       'INSULTING MODESTY OF WOMEN (EVE TEASING)':2, 'CASES OF HURT':3,
       'ROBBERY':3, 'MISSING PERSON':5, 'BURGLARY - DAY':2, 'FORGERY':3,
       'KIDNAPPING AND ABDUCTION':7, 'KARNATAKA STATE LOCAL ACTS':4,
       'CRUELTY BY HUSBAND':4, 'RIOTS':7, 'DACOITY':5, 'CRIMINAL INTIMIDATION':3,
       'CRIMINAL TRESPASS':3, 'CHEATING':2,
       'Disobedience to Order Promulgated by PublicServan':3,
       'ATTEMPT TO MURDER':7, 'SUICIDE':1, 'OFFENCES RELATED TO MARRIAGE':4,
       'EXPOSURE AND ABANDONMENT OF CHILD':5, 'CRIMINAL BREACH OF TRUST':4,
       'MISCHIEF':3, 'MURDER':10,
       'OFFENCES AGAINST PUBLIC SERVANTS (Public servant is a victim)':5,
       'RAPE':10, 'ELECTION':6, 'AFFRAY':3, 'MOLESTATION':6,
       'DEATHS DUE TO RASHNESS/NEGLIGENCE':7,
       'WRONGFUL RESTRAINT/CONFINEMENT':5,
       'OFFENCES BY PUBLIC SERVANTS (EXCEPT CORRUPTION) (Public servant is accused)':5,
       ' CYBER CRIME':5, 'PORNOGRAPHY':6, 'ARSON':7, 'DOWRY DEATHS':9,
       'Concealment of birth by secret disposal of Child':8,
       'CRIMINAL CONSPIRACY':4, 'SLAVERY':10, 'PUBLIC NUISANCE':2,
       'ESCAPE FROM LAWFUL CUSTODY AND RESISTANCE':6,
       'DEATHS-MISCARRIAGE':1,
       'OFFENCES PROMOTING ENEMITY':4, 'ASSAULT':5,
       'Failure to appear to Court':3,
       'UNNATURAL SEX ':1, 'DEFAMATION':2,
       'COMMUNAL / RELIGION   ':6,  'FALSE EVIDENCE':5,
       'OF ABETMENT':4,
       'ATTEMPT TO CULPABLE HOMICIDE NOT AMOUNTING TO MURDER':5,
       'COUNTERFEITING':5, 'POISONING-PROFESSIONAL':7, 'ADULTERATION':2,
       'CRIMINAL MISAPPROPRIATION ':3, 'RECEIVING OF STOLEN PROPERTY':2,
       'Attempting to commit offences':2
}


# In[4]:


di_month={
    1:'January', 2:'February', 3:'March', 4:'April', 5:'May', 6:'June',
    7:'July', 8:'August', 9:'September', 10:'October', 11:'November', 12:'December'
}


# In[5]:


shp = shapefile.Reader('BengaluruCityPSJurisBoun.shp') 
all_shapes = shp.shapes() 
all_records = shp.records()
all_records[34][0]=all_records[34][0][:-11]


# In[6]:


policejson=json.load(open('BengaluruCityPSJurisBoun.geojson'))


# In[7]:


ps=[]
psdisplayname=[]
for i in range(0,114):
    temp_ward=policejson['features'][i]['properties']['Name']
    psdisplayname.append(temp_ward)
    regex=re.compile('[^a-zA-Z]')
    temp_ward=regex.sub('',temp_ward)
    temp_ward=temp_ward[13:]
    ps.append(temp_ward)


# In[8]:


#2018 ps_match


# In[9]:


blr_crime_loc_2018=pd.read_csv('Final_IPC_2018.csv',index_col=0)


# In[10]:


blr_crime_loc_2018['StationNo']=-1
for i in blr_crime_loc_2018.index:
    a=Point(blr_crime_loc_2018.loc[i,'Longitude'],blr_crime_loc_2018.loc[i,'Latitude'])
    for j in range(114):
        if a.within(shape(all_shapes[j])):
            blr_crime_loc_2018.loc[i,'StationNo']=j
            break


# In[11]:


blr_crime_loc_2018['Severity']=blr_crime_loc_2018['CrimeGroup_Name']


# In[12]:


blr_crime_loc_2018['Month']=blr_crime_loc_2018['FIR_Date'].str[3:5]
blr_crime_loc_2018['Month']=blr_crime_loc_2018['Month'].astype(np.int)


# In[13]:


lats=blr_crime_loc_2018['Latitude'].values
long=blr_crime_loc_2018['Longitude'].values
sevs=blr_crime_loc_2018['Severity'].values
months=blr_crime_loc_2018['Month']
long=long.astype(np.float)
lats=lats.astype(np.float)


# In[14]:


ps_sevs_2018=[pd.DataFrame(columns=['Police Station','Total_sevs','Avg_sevs']) for i in range(13)]
ps_match_2018=[pd.DataFrame(columns=['Police Station','Total_sevs','Avg_sevs']) for i in range(13)]


# In[15]:


for i in range(13):
    ps_sevs_2018[i]['Police Station']=ps
    ps_match_2018[i]['Police Station']=psdisplayname
    ps_sevs_2018[i]['Total_sevs']=0
    ps_sevs_2018[i]['Avg_sevs']=0
    ps_match_2018[i]['Total_sevs']=0
    ps_match_2018[i]['Avg_sevs']=0


# In[16]:


list_ps_sevs=[[[] for x in range(13)] for x in range(114)]

for i in range(len(blr_crime_loc_2018.index)):
    blr_crime_loc_2018.loc[i,'Severity']=di[blr_crime_loc_2018.loc[i,'Severity']]
    if blr_crime_loc_2018.loc[i,'StationNo']==-1:
        continue
    
    month=blr_crime_loc_2018.loc[i,'Month']
    sever=blr_crime_loc_2018.loc[i,'Severity']
    station_no=blr_crime_loc_2018.loc[i,'StationNo']
    
    ps_sevs_2018[0].loc[station_no,'Total_sevs']+=sever
    ps_sevs_2018[month].loc[station_no,'Total_sevs']+=sever
    list_ps_sevs[station_no][0].append(int(round(sever)))
    list_ps_sevs[station_no][month].append(int(round(sever)))


# In[17]:


for i in range(13):
    ps_match_2018[i]['Total_sevs']=ps_sevs_2018[i]['Total_sevs']


# In[18]:


def normz_2018(a,i):
    if a==0:
        return 0
    minimum=np.sort(ps_match_2018[i]['Avg_sevs'].unique())[1]
    maximum=np.sort(ps_match_2018[i]['Avg_sevs'].unique())[-1]
    return ((a-minimum)/(maximum-minimum))
#1.94 is the min avg_sev and 4.95is max avg_sev


# In[20]:


for i in range(13):
    ps_match_2018[i]['Avg_sevs_norm']=0
    for j in range(114):
        if len(list_ps_sevs[j][i])==0:
            ps_match_2018[i].loc[j,'Avg_sevs']=0
        else:
            ps_match_2018[i].loc[j,'Avg_sevs']=np.mean(list_ps_sevs[j][i],axis=0)
        ps_match_2018[i].loc[j,'Avg_sevs_norm']=normz_2018(ps_match_2018[i].loc[j,'Avg_sevs'],i)


# In[21]:


#2017 ps_match


# In[22]:


blr_crime_loc_2017=pd.read_csv('Final_IPC_2017.csv',index_col=0)


# In[23]:


blr_crime_loc_2017['StationNo']=-1
for i in blr_crime_loc_2017.index:
    a=Point(blr_crime_loc_2017.loc[i,'Longitude'],blr_crime_loc_2017.loc[i,'Latitude'])
    for j in range(114):
        if a.within(shape(all_shapes[j])):
            blr_crime_loc_2017.loc[i,'StationNo']=j
            break


# In[24]:


blr_crime_loc_2017['Severity']=blr_crime_loc_2017['CrimeGroup_Name']


# In[25]:


blr_crime_loc_2017['Month']=blr_crime_loc_2017['FIR_Date'].str[3:5]
blr_crime_loc_2017['Month']=blr_crime_loc_2017['Month'].astype(np.int)


# In[26]:


lats=blr_crime_loc_2017['Latitude'].values
long=blr_crime_loc_2017['Longitude'].values
sevs=blr_crime_loc_2017['Severity'].values
months=blr_crime_loc_2017['Month']
long=long.astype(np.float)
lats=lats.astype(np.float)


# In[27]:


ps_sevs_2017=[pd.DataFrame(columns=['Police Station','Total_sevs','Avg_sevs']) for i in range(13)]
ps_match_2017=[pd.DataFrame(columns=['Police Station','Total_sevs','Avg_sevs']) for i in range(13)]

for i in range(13):
    ps_sevs_2017[i]['Police Station']=ps
    ps_match_2017[i]['Police Station']=psdisplayname
    ps_sevs_2017[i]['Total_sevs']=0
    ps_sevs_2017[i]['Avg_sevs']=0
    ps_match_2017[i]['Total_sevs']=0
    ps_match_2017[i]['Avg_sevs']=0


# In[28]:


list_ps_sevs=[[[] for x in range(13)] for x in range(114)]

for i in range(len(blr_crime_loc_2017.index)):
    blr_crime_loc_2017.loc[i,'Severity']=di[blr_crime_loc_2017.loc[i,'Severity']]
    if blr_crime_loc_2017.loc[i,'StationNo']==-1:
        continue
    
    month=blr_crime_loc_2017.loc[i,'Month']
    sever=blr_crime_loc_2017.loc[i,'Severity']
    station_no=blr_crime_loc_2017.loc[i,'StationNo']
    
    ps_sevs_2017[0].loc[station_no,'Total_sevs']+=sever
    ps_sevs_2017[month].loc[station_no,'Total_sevs']+=sever
    list_ps_sevs[station_no][0].append(int(round(sever)))
    list_ps_sevs[station_no][month].append(int(round(sever)))


# In[29]:


for i in range(13):
    ps_match_2017[i]['Total_sevs']=ps_sevs_2017[i]['Total_sevs']


# In[30]:


def normz_2017(a,i):
    if a==0:
        return 0
    minimum=np.sort(ps_match_2017[i]['Avg_sevs'].unique())[1]
    maximum=np.sort(ps_match_2017[i]['Avg_sevs'].unique())[-1]
    return ((a-minimum)/(maximum-minimum))
#1.94 is the min avg_sev and 4.95is max avg_sev


# In[32]:


for i in range(13):
    ps_match_2017[i]['Avg_sevs_norm']=0
    for j in range(114):
        if len(list_ps_sevs[j][i])==0:
            ps_match_2017[i].loc[j,'Avg_sevs']=0
        else:
            ps_match_2017[i].loc[j,'Avg_sevs']=np.mean(list_ps_sevs[j][i],axis=0)
        ps_match_2017[i].loc[j,'Avg_sevs_norm']=normz_2017(ps_match_2017[i].loc[j,'Avg_sevs'],i)


# In[33]:


#2016 ps_match


# In[34]:


blr_crime_loc_2016=pd.read_csv('Final_IPC_2016.csv',index_col=0)


# In[35]:


blr_crime_loc_2016['StationNo']=-1
for i in blr_crime_loc_2016.index:
    a=Point(blr_crime_loc_2016.loc[i,'Longitude'],blr_crime_loc_2016.loc[i,'Latitude'])
    for j in range(114):
        if a.within(shape(all_shapes[j])):
            blr_crime_loc_2016.loc[i,'StationNo']=j
            break


# In[36]:


blr_crime_loc_2016['Severity']=blr_crime_loc_2016['CrimeGroup_Name']


# In[37]:


blr_crime_loc_2016['Month']=blr_crime_loc_2016['FIR_Date'].str[3:5]
blr_crime_loc_2016['Month']=blr_crime_loc_2016['Month'].astype(np.int)


# In[38]:


lats=blr_crime_loc_2016['Latitude'].values
long=blr_crime_loc_2016['Longitude'].values
sevs=blr_crime_loc_2016['Severity'].values
months=blr_crime_loc_2016['Month']
long=long.astype(np.float)
lats=lats.astype(np.float)


# In[39]:


ps_sevs_2016=[pd.DataFrame(columns=['Police Station','Total_sevs','Avg_sevs']) for i in range(13)]
ps_match_2016=[pd.DataFrame(columns=['Police Station','Total_sevs','Avg_sevs']) for i in range(13)]

for i in range(13):
    ps_sevs_2016[i]['Police Station']=ps
    ps_match_2016[i]['Police Station']=psdisplayname
    ps_sevs_2016[i]['Total_sevs']=0
    ps_sevs_2016[i]['Avg_sevs']=0
    ps_match_2016[i]['Total_sevs']=0
    ps_match_2016[i]['Avg_sevs']=0


# In[40]:


list_ps_sevs=[[[] for x in range(13)] for x in range(114)]

for i in range(len(blr_crime_loc_2016.index)):
    blr_crime_loc_2016.loc[i,'Severity']=di[blr_crime_loc_2016.loc[i,'Severity']]
    if blr_crime_loc_2016.loc[i,'StationNo']==-1:
        continue
    
    month=blr_crime_loc_2016.loc[i,'Month']
    sever=blr_crime_loc_2016.loc[i,'Severity']
    station_no=blr_crime_loc_2016.loc[i,'StationNo']
    
    ps_sevs_2016[0].loc[station_no,'Total_sevs']+=sever
    ps_sevs_2016[month].loc[station_no,'Total_sevs']+=sever
    list_ps_sevs[station_no][0].append(int(round(sever)))
    list_ps_sevs[station_no][month].append(int(round(sever)))


# In[41]:


for i in range(13):
    ps_match_2016[i]['Total_sevs']=ps_sevs_2016[i]['Total_sevs']


# In[42]:


def normz_2016(a,i):
    if a==0:
        return 0
    minimum=np.sort(ps_match_2016[i]['Avg_sevs'].unique())[1]
    maximum=np.sort(ps_match_2016[i]['Avg_sevs'].unique())[-1]
    return ((a-minimum)/(maximum-minimum))


# In[44]:


for i in range(13):
    ps_match_2016[i]['Avg_sevs_norm']=0
    for j in range(114):
        if len(list_ps_sevs[j][i])==0:
            ps_match_2016[i].loc[j,'Avg_sevs']=0
        else:
            ps_match_2016[i].loc[j,'Avg_sevs']=np.mean(list_ps_sevs[j][i],axis=0)
        ps_match_2016[i].loc[j,'Avg_sevs_norm']=normz_2016(ps_match_2016[i].loc[j,'Avg_sevs'],i)


# In[ ]:





# In[45]:


def generate_random(number, polygon):
    list_of_points = pd.DataFrame(columns=['Latitude','Longitude'])
    minx, miny, maxx, maxy = polygon.bounds
    counter = 0
    while counter < number:
        x=random.uniform(minx,maxx)
        y=random.uniform(miny,maxy)
        pnt = Point(x,y)
        if polygon.contains(pnt):
            list_of_points.loc[len(list_of_points.index)]=[y,x]
            counter += 1
    return list_of_points


# In[46]:


shp1 =geopandas.read_file('BengaluruCityPSJurisBoun.shp')


# In[47]:


points_within=[pd.DataFrame(columns=['Latitude','Longitude']) for i in range(114)]
for i in range(114):
    points_within[i]=generate_random(50,shp1.iloc[i]['geometry'])
    #list[i]= df with lat,Long


# In[48]:


def knn_distances(weights):
    for c in range(0,len(weights)):
        w=weights[c]
        sumw=0
        w=w.tolist()
        if w[0] == 0:
            myans.append(1.)
        else:
            for i in range(0,len(w)):
                sumw+=w[i]
            ad=sumw/len(w)
            ad=np.reciprocal(ad)
            myans.append(ad)
    return weights


# In[49]:


prob_per_ward_2016=[[] for i in range(13)]
prob_per_ward_2017=[[] for i in range(13)]
prob_per_ward_2018=[[] for i in range(13)]
myans=[]


# In[50]:


def create_prob_per_ward_18(crime):
    global prob_per_ward_2018
    global myans
    prob_per_ward_2018=[[] for i in range(13)]
    dat_2018=blr_crime_loc_2018[blr_crime_loc_2018.CrimeGroup_Name==crime]
    x=[pd.DataFrame(columns=['Latitude','Longitude']) for i in range(13)]
    y=[]
    #x[i] is set of points with this crime and month i
    x[0]['Latitude']=dat_2018['Latitude']
    x[0]['Longitude']=dat_2018['Longitude']
    y.append(pd.DataFrame(index=range(0,len(x[0].index)),columns=['Probability']))
    y[0]['Probability']=1
    for i in range(1,13):
        temp=dat_2018[dat_2018.Month==i]
        x[i]['Latitude']=temp['Latitude']
        x[i]['Longitude']=temp['Longitude']
        y.append(pd.DataFrame(index=range(0,len(x[i].index)),columns=['Probability']))
        y[i]['Probability']=1

    for i in range(13):
        if len(x[i].index)==0:
            for j in range(114):
                prob_per_ward_2018[i].append(0)
        else:
            if len(x[i].index)>10:
                model = neighbors.KNeighborsRegressor(n_neighbors = 10,weights=knn_distances)
            else:
                if len(x[i].index)>7:
                    model = neighbors.KNeighborsRegressor(n_neighbors = 5,weights=knn_distances)
                else:
                    if len(x[i].index)>3:
                        model = neighbors.KNeighborsRegressor(n_neighbors = 3,weights=knn_distances)
                    else:
                        model = neighbors.KNeighborsRegressor(n_neighbors = 1,weights=knn_distances)
            model.fit(x[i],y[i])
            for j in range(114):
                myans=[]
                temp=points_within[j]
                model.predict(temp)
                prob_per_ward_2018[i].append(np.mean(myans))


# In[51]:


def create_prob_per_ward_17(crime):
    global prob_per_ward_2017
    global myans
    prob_per_ward_2017=[[] for i in range(13)]
    dat_2017=blr_crime_loc_2017[blr_crime_loc_2017.CrimeGroup_Name==crime]
    x=[pd.DataFrame(columns=['Latitude','Longitude']) for i in range(13)]
    y=[]
    #x[i] is set of points with this crime and month i
    x[0]['Latitude']=dat_2017['Latitude']
    x[0]['Longitude']=dat_2017['Longitude']
    y.append(pd.DataFrame(index=range(0,len(x[0].index)),columns=['Probability']))
    y[0]['Probability']=1
    for i in range(1,13):
        temp=dat_2017[dat_2017.Month==i]
        x[i]['Latitude']=temp['Latitude']
        x[i]['Longitude']=temp['Longitude']
        y.append(pd.DataFrame(index=range(0,len(x[i].index)),columns=['Probability']))
        y[i]['Probability']=1

    for i in range(13):
        if len(x[i].index)==0:
            for j in range(114):
                prob_per_ward_2017[i].append(0)
        else:
            if len(x[i].index)>10:
                model = neighbors.KNeighborsRegressor(n_neighbors = 10,weights=knn_distances)
            else:
                if len(x[i].index)>7:
                    model = neighbors.KNeighborsRegressor(n_neighbors = 5,weights=knn_distances)
                else:
                    if len(x[i].index)>3:
                        model = neighbors.KNeighborsRegressor(n_neighbors = 3,weights=knn_distances)
                    else:
                        model = neighbors.KNeighborsRegressor(n_neighbors = 1,weights=knn_distances)
            model.fit(x[i],y[i])
            for j in range(114):
                myans=[]
                temp=points_within[j]
                model.predict(temp)
                prob_per_ward_2017[i].append(np.mean(myans))


# In[52]:


def create_prob_per_ward_16(crime):
    global prob_per_ward_2016
    global myans
    prob_per_ward_2016=[[] for i in range(13)]
    dat_2016=blr_crime_loc_2016[blr_crime_loc_2016.CrimeGroup_Name==crime]
    x=[pd.DataFrame(columns=['Latitude','Longitude']) for i in range(13)]
    y=[]
    #x[i] is set of points with this crime and month i
    x[0]['Latitude']=dat_2016['Latitude']
    x[0]['Longitude']=dat_2016['Longitude']
    y.append(pd.DataFrame(index=range(0,len(x[0].index)),columns=['Probability']))
    y[0]['Probability']=1
    for i in range(1,13):
        temp=dat_2016[dat_2016.Month==i]
        x[i]['Latitude']=temp['Latitude']
        x[i]['Longitude']=temp['Longitude']
        y.append(pd.DataFrame(index=range(0,len(x[i].index)),columns=['Probability']))
        y[i]['Probability']=1

    for i in range(13):
        if len(x[i].index)==0:
            for j in range(114):
                prob_per_ward_2016[i].append(0)
        else:
            if len(x[i].index)>10:
                model = neighbors.KNeighborsRegressor(n_neighbors = 10,weights=knn_distances)
            else:
                if len(x[i].index)>7:
                    model = neighbors.KNeighborsRegressor(n_neighbors = 5,weights=knn_distances)
                else:
                    if len(x[i].index)>3:
                        model = neighbors.KNeighborsRegressor(n_neighbors = 3,weights=knn_distances)
                    else:
                        model = neighbors.KNeighborsRegressor(n_neighbors = 1,weights=knn_distances)
            model.fit(x[i],y[i])
            for j in range(114):
                myans=[]
                temp=points_within[j]
                model.predict(temp)
                prob_per_ward_2016[i].append(np.mean(myans))


# In[66]:


def mapcrime(crime):
    
    global report
    
    create_prob_per_ward_16(crime)
    create_prob_per_ward_17(crime)
    create_prob_per_ward_18(crime)

    t18=prob_per_ward_2018[1:]
    t17=prob_per_ward_2017[1:]
    t16=prob_per_ward_2016[1:]
    ps18=[]
    ps17=[]
    ps16=[]
    for i in range(1,13):
        ps18.append(list(ps_match_2018[i]['Avg_sevs']))
        ps17.append(list(ps_match_2017[i]['Avg_sevs']))
        ps16.append(list(ps_match_2016[i]['Avg_sevs']))
    all_probs=t16+t17+t18
    all_sevs=ps16+ps17+ps18

    test_data=pd.DataFrame(columns=['Prob_1yback','Prob_1mback','Avg_sevs_1yback','Sev_cur_crime','Current_Prob'])
    for i in range(12,36):
        for j in range(114):
            test_data=test_data.append(pd.DataFrame([[all_probs[i-12][j],all_probs[i-1][j],all_sevs[i-12][j],di[crime],all_probs[i][j]]],columns=test_data.columns))

    test_data=test_data.reset_index(drop=True)

    test_data=test_data.sample(frac=1).reset_index(drop=True)

    xf=pd.DataFrame(np.c_[test_data['Prob_1yback'],test_data['Prob_1mback'],test_data['Avg_sevs_1yback'],test_data['Sev_cur_crime']],columns=['Prob_1yback','Prob_1mback','Avg_sevs_1yback','Sev_cur_crime'])
    yf=pd.DataFrame(test_data['Current_Prob'],columns=['Current_Prob'])

    xf_train=xf[:]
    yf_train=yf[:]
    xf_test=xf[:]
    yf_test=yf[:]

    fmodel = LinearRegression()
    fmodel.fit(xf_train,yf_train)
    yf_pred = fmodel.predict(xf_test)

    rmse = np.sqrt(mean_squared_error(yf_test,yf_pred))
    r2 = r2_score(yf_test,yf_pred)
#     print("RMSE of test set is {}".format(rmse))
#     print("R2 score of test set is {}".format(r2))

    prob_per_ward_2019=[pd.DataFrame(columns=['Police Station','Pred_Prob']) for x in range(13)]
    for i in range(13):
        prob_per_ward_2019[i]['Police Station']=psdisplayname
        prob_per_ward_2019[i]['Pred_Prob']=0
    for i in range(36,48):
        for j in range(114):
            predx=pd.DataFrame(columns=['Prob_1yback','Prob_1mback','Avg_sevs_1yback','Sev_cur_crime'])
            if i==36:
                predx=predx.append(pd.DataFrame([[all_probs[i-12][j],all_probs[i-1][j],all_sevs[i-12][j],di[crime]]],columns=predx.columns))
                predx=predx.reset_index(drop=True)
                prob_per_ward_2019[1].loc[j,'Pred_Prob']=fmodel.predict(predx)[0][0]
            else:
                predx=predx.append(pd.DataFrame([[all_probs[i-12][j],prob_per_ward_2019[i-35].loc[j,'Pred_Prob'],all_sevs[i-12][j],di[crime]]],columns=predx.columns))
                predx=predx.reset_index(drop=True)
                prob_per_ward_2019[i-35].loc[j,'Pred_Prob']=fmodel.predict(predx)[0][0]

    #for month 0
    #for yearly analysis, train will have only 2 samples 17 from 16 and 18 from 17, so for yearly we can take avg of the 12 months
    for i in range(114):
        temp=0
        for j in range(1,13):
            temp+=prob_per_ward_2019[j].loc[i,'Pred_Prob']
        prob_per_ward_2019[0].loc[i,'Pred_Prob']=temp

    for i in range(1,13):
        ward_index=[]
        temp_report=prob_per_ward_2019[i][prob_per_ward_2019[i]['Pred_Prob']>10].index.tolist()
        if len(temp_report)>10:
            temp_report=prob_per_ward_2019[i].nlargest(5,'Pred_Prob')
            temp_report=list(temp_report.index.values)
        for j in temp_report:
            report[j].append((i,crime))
            
            crime_count_y=blr_crime_loc_2018[blr_crime_loc_2018.CrimeGroup_Name==crime]
            crime_count_y=crime_count_y[crime_count_y.StationNo==j]
            crime_count_m=crime_count_y[crime_count_y.Month==i]
            report[j].append([2018,len(crime_count_y.index),len(crime_count_m.index)])
            
            crime_count_y=blr_crime_loc_2017[blr_crime_loc_2017.CrimeGroup_Name==crime]
            crime_count_y=crime_count_y[crime_count_y.StationNo==j]
            crime_count_m=crime_count_y[crime_count_y.Month==i]
            report[j].append([2017,len(crime_count_y.index),len(crime_count_m.index)])
            
            crime_count_y=blr_crime_loc_2016[blr_crime_loc_2016.CrimeGroup_Name==crime]
            crime_count_y=crime_count_y[crime_count_y.StationNo==j]
            crime_count_m=crime_count_y[crime_count_y.Month==i]
            report[j].append([2016,len(crime_count_y.index),len(crime_count_m.index)])
    
    for i in range(13):
        psmap=folium.Map(location=[12.9716, 77.5946],zoom_start=11)
        if i==0 and max(prob_per_ward_2019[0]['Pred_Prob'])<151:
            ts=np.sort(prob_per_ward_2019[0]['Pred_Prob'])
            ts=[ts[0],ts[-100],ts[-80],ts[-50],ts[-30],ts[-10],ts[-1]]
            folium.Choropleth(
                geo_data='BengaluruCityPSJurisBoun.geojson',
                name='PSB',
                data=prob_per_ward_2019[i],
                columns=['Police Station','Pred_Prob'],
                key_on='feature.properties.Name',
                fill_color='YlOrRd',
                threshold_scale=np.sort(list(set(ts))),
                fill_opacity=0.5,
                line_opacity=0.5,
                legend_name='Severe Crime vulnerability'
            ).add_to(psmap)
        else:
            folium.Choropleth(
                geo_data='BengaluruCityPSJurisBoun.geojson',
                name='PSB',
                data=prob_per_ward_2019[i],
                columns=['Police Station','Pred_Prob'],
                key_on='feature.properties.Name',
                fill_color='YlOrRd',
                fill_opacity=0.5,
                line_opacity=0.5,
                legend_name='Severe Crime vulnerability'
            ).add_to(psmap)
        folium.GeoJson(
            data='BengaluruCityPSJurisBoun.geojson',
            name='B',
            show=True,
            style_function=lambda feature: {
                'fillColor': 'transparent',
                'color': 'black',
                'weight': 1,
                'dashArray': '5, 5',
                'fillOpacity':0.5
            },   
            highlight_function=lambda x: {'weight':3, 
                                          'color':'transparent',
                                          'fillOpacity':0.5},    
            tooltip=folium.features.GeoJsonTooltip(
                fields=['PoliceStationName','KGISPoliceStationID',],
                aliases=['Police Station','KGIS Police Station ID'],                              
            ),  
        ).add_to(psmap)
        crime=crime.replace(' ','')
        crime=crime.replace('/','')
        psmap.save('E:/MAPS/'+str(crime)+str(i)+'.html')


# In[58]:


def mapcrime2(crime):
    
    global report

    prob_per_ward_2019=[pd.DataFrame(columns=['Police Station','Pred_Prob']) for x in range(13)]
    for i in range(13):
        prob_per_ward_2019[i]['Police Station']=psdisplayname
        prob_per_ward_2019[i]['Pred_Prob']=0

    c16=[0]*13
    c17=[0]*13
    c18=[0]*13
    
    for i in range(1,13):
        tt=blr_crime_loc_2016[blr_crime_loc_2016.Month==i]
        tt=tt[tt.CrimeGroup_Name==crime]
        for k in tt.index:
            stno=tt.loc[k,'StationNo']
            if stno==-1:
                continue
            prob_per_ward_2019[i].loc[stno,'Pred_Prob']+=1
            c16[0]+=1
            c16[i]+=1
        
        tt=blr_crime_loc_2017[blr_crime_loc_2017.Month==i]
        tt=tt[tt.CrimeGroup_Name==crime]
        for k in tt.index:
            stno=tt.loc[k,'StationNo']
            if stno==-1:
                continue
            prob_per_ward_2019[i].loc[stno,'Pred_Prob']+=1
            c17[0]+=1
            c17[i]+=1
        
        tt=blr_crime_loc_2018[blr_crime_loc_2018.Month==i]
        tt=tt[tt.CrimeGroup_Name==crime]
        for k in tt.index:
            stno=tt.loc[k,'StationNo']
            if stno==-1:
                continue
            prob_per_ward_2019[i].loc[stno,'Pred_Prob']+=1
            c18[0]+=1
            c18[i]+=1

    #for month 0
    #for yearly analysis, train will have only 2 samples 17 from 16 and 18 from 17, so for yearly we can take avg of the 12 months
    for i in range(114):
        temp=0
        for j in range(1,13):
            temp+=prob_per_ward_2019[j].loc[i,'Pred_Prob']
        prob_per_ward_2019[0].loc[i,'Pred_Prob']=temp

    for i in range(1,13):
        ward_index=[]
        temp_report=prob_per_ward_2019[i].nlargest(7,'Pred_Prob')
        temp_report=list(temp_report.index.values)
        for j in temp_report:
            report[j].append((i,crime))
            report[j].append([2018,c18[0],c18[i]])
            report[j].append([2017,c17[0],c17[i]])
            report[j].append([2016,c16[0],c16[i]])
    
    for i in range(13):
        psmap=folium.Map(location=[12.9716, 77.5946],zoom_start=11)
        folium.Choropleth(
            geo_data='BengaluruCityPSJurisBoun.geojson',
            name='PS_choro',
            data=prob_per_ward_2019[i],
            columns=['Police Station','Pred_Prob'],
            key_on='feature.properties.Name',
            fill_color='YlOrRd',
           # threshold_scale=[0,1,20,50,100,150,500,1000,1500,2000],
            fill_opacity=0.5,
            line_opacity=0.5,
            legend_name='Severe Crime vulnerability'
        ).add_to(psmap)
        folium.GeoJson(
            data='BengaluruCityPSJurisBoun.geojson',
            name='PS_mousehover',
            show=True,
            style_function=lambda feature: {
                'fillColor': 'transparent',
                'color': 'black',
                'weight': 1,
                'dashArray': '5, 5',
                'fillOpacity':0.5
            },   
            highlight_function=lambda x: {'weight':3, 
                                          'color':'transparent',
                                          'fillOpacity':0.5},    
            tooltip=folium.features.GeoJsonTooltip(
                fields=['PoliceStationName','KGISPoliceStationID',],
                aliases=['Police Station','KGIS Police Station ID'],                              
            ),  
        ).add_to(psmap)
        crime=crime.replace(' ','')
        crime=crime.replace('/','')
        psmap.save('E:/MAPS/'+str(crime)+str(i)+'.html')


# In[ ]:


list_model=[]
report=[[] for i in range(114)]
for i in list(di.keys()):
    if i in blr_crime_loc_2018.groupby('CrimeGroup_Name').count().index:
        if i in blr_crime_loc_2017.groupby('CrimeGroup_Name').count().index:
            if i in blr_crime_loc_2016.groupby('CrimeGroup_Name').count().index:
                for m in range(1,13):
                    t1=blr_crime_loc_2018[blr_crime_loc_2018.CrimeGroup_Name==i]
                    t2=t1[t1.Month==m]
                    if len(t2.index)<1:
                        break
                    t1=blr_crime_loc_2017[blr_crime_loc_2017.CrimeGroup_Name==i]
                    t2=t1[t1.Month==m]
                    if len(t2.index)<1:
                        break
                    t1=blr_crime_loc_2016[blr_crime_loc_2016.CrimeGroup_Name==i]
                    t2=t1[t1.Month==m]
                    if len(t2.index)<1:
                        break
                if len(t2.index)>0:
                    list_model.append(i)
                    mapcrime(i)


# In[ ]:


for i in list(di.keys()):
    if i in list_model:
        #do_nothing
    else:
        mapcrime2(i)


# In[75]:


strTable = "<html>"
strTable=strTable+"<style> table {width:100%;} table, th, td {border: 1px solid black;}"
strTable=strTable+"th, td {padding: 15px;} table tr:nth-child(even) { background-color: #eee;}"
strTable=strTable+"table tr:nth-child(odd) { background-color: #fff;}  table th {background-color: blue; color: white;}</style>"
strTable=strTable+"<h1>Vulnerable Crimes for each PS region</h1>"
strTable=strTable+"<table><tr><th>Vulnerability assessment takes into account occurances in the station area in previous years as well as in surrounding and nearby station areas.</th></tr>"
for ward_report in range(114):
    if len(report[ward_report])==0:
        continue
    strRW = "<tr><th>Police Station Name:"+policejson['features'][ward_report]['properties']['Name']+'</th></tr>'
    for i in range(3,len(report[ward_report]),4):
        strRW=strRW+"<tr><td>Vulnerable to: "+str(report[ward_report][i-3][1])+" during the month of "+di_month[report[ward_report][i-3][0]]+". In 2018, there were "+str(report[ward_report][i-2][1])+" cases, with "+str(report[ward_report][i-2][2])+" in "+di_month[report[ward_report][i-3][0]]+", In 2017 there were "+str(report[ward_report][i-1][1])+" cases, with "+str(report[ward_report][i-1][2])+" in "+di_month[report[ward_report][i-3][0]]+", In 2016 there were "+str(report[ward_report][i][1])+" cases, with "+str(report[ward_report][i][2])+" in "+di_month[report[ward_report][i-3][0]]+"</td></tr>"
    
    strTable = strTable+strRW

strTable = strTable+"</table></html>"
 
hs = open("E:/Report.html", 'w')
hs.write(strTable)


# In[77]:


hs.close()

